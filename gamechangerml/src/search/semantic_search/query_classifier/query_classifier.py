from transformers import pipeline
from .query_classifier_config import QueryClassifierConfig


class QueryClassifier:
    """Use a grammatical correctness classifier to determine whether or not a
    query generated by `QueryGenerator` should be used as training data.

    Args:
        base_model (str or transformers.PreTrainedModel or transformers.TFPreTrainedModel, optional):
            The text classification model that will be used to make predictions.
            Defaults to QueryClassifierConfig.BASE_MODEL.
        minimum_acceptable_threshold (float, optional): The minimum score
            (between 0 and 1) required to deem a query as "Acceptable" to use as
            training data for the bi-encoder. Defaults to
            QueryClassifierConfig.MINIMUM_ACCEPTABLE_THRESHOLD.
    """

    def __init__(
        self,
        base_model=QueryClassifierConfig.BASE_MODEL,
        minimum_acceptable_threshold=QueryClassifierConfig.MINIMUM_ACCEPTABLE_THRESHOLD,
    ):
        self._model = pipeline("text-classification", model=base_model)
        self._minimum_acceptable_threshold = minimum_acceptable_threshold

    def classify(self, query: str) -> dict:
        """Classify the given query as "Acceptable" or "Unacceptable" in terms
        of grammatical correctness.

        Args:
            query (str): The query to classify.

        Returns:
            dict: The result of the classification model. The "label" key
                corresponds to whether or not the query was determined
                "Acceptable" or "Unacceptable".
        """
        result = self._model(query)[0]

        # 0=unacceptable, 1=acceptable, as defined here: https://nyu-mll.github.io/CoLA/
        label = result["label"]

        if label == "LABEL_0":
            result["label"] = "Unacceptable"
        elif label == "LABEL_1":
            result["label"] = "Acceptable"

        return result

    def is_query_acceptable(self, query: str) -> bool:
        """Determine whether the given query is grammatically acceptable enough
        to use as training data for the bi-encoder model.

        This is useful to determine which queries generated by QueryGenerator
        are suitable training data for a bi-encoder.

        Args:
            query (str): The query to classify.

        Returns:
            bool: True if the query is grammatically acceptable (and is suitable
                to use as training data for a bi-encoder model), False otherwise.
        """
        threshold = self._minimum_acceptable_threshold

        query_without_qmark = query.rstrip("?").strip()
        result_without_qmark = self.classify(query_without_qmark)

        if self._is_query_acceptable(result_without_qmark, threshold):
            return True

        query_with_qmark = query_without_qmark + "?"
        result_with_qmark = self.classify(query_with_qmark)

        if self._is_query_acceptable(result_with_qmark, threshold):
            return True

        return False

    def _is_query_acceptable(self, result, threshold):
        return result["label"] == "Acceptable" and result["score"] >= threshold
