import pandas as pd
from datetime import date

from gamechangerml.src.featurization.ref_list import collect_ref_list
from gamechangerml.src.text_classif.utils.resp_stats import count_output


# FUNCTIONS
def get_agencies_dict(agencies_file):
    """
    Pulls agencies list into a dictionary for use in abbreviations pipeline.

    Args:
        agencies: file of the agency documents. currently set to agencies.csv

    Returns:
        dictionary of all agencies
    """
    df = pd.read_csv(agencies_file)
    aliases = {}

    for index, row in df.iterrows():
        temp = list(str(row["Agency_Aliases"]).split(";"))
        for i in temp:
            agency_list = []
            if i not in aliases:
                agency_list.append(row["Agency_Name"])
                aliases[i] = agency_list
            else:
                aliases[i].append(row["Agency_Name"])
        aliases[row["Agency_Name"]] = [row["Agency_Name"]]

    return aliases


def get_agencies(file_dataframe, agencies_dict):
    """
    Get all the disambiguated agencies for a list of documents.

    Args:
        file_dataframe: dataframe generated by responsibilities.py for a given
            set of documents
        doc_dups: list of disambiguated agencies
        duplicates: list of potentially ambiguous agencies
        agencies_dict: dictionary of agency acroynms to full agency names

    Returns:
        Vector of all extracted agencies for every row of the input dataframe.
    """
    aliases = agencies_dict
    df = file_dataframe
    all_agencies = []

    for row in df:
        agencies = []
        for x in aliases.keys():
            if " " + x in row:
                agencies.append(aliases[x])
        flat_a = [item for sublist in agencies for item in sublist]
        flat_a = ["".join(x) for x in flat_a]
        flat_a = set(flat_a)
        all_agencies.append(",".join(flat_a))

    return all_agencies


def get_references(file_dataframe):
    """
    Get all the refs for a list of documents.

    Args:
        file_dataframe: dataframe generated by responsibilities.py for a given
            set of documentss

    Returns:
        Vector of all extracted agencies for every row of the input dataframe.
    """
    df = file_dataframe
    all_refs = []

    for row in df:
        refs = []
        refs.append(list(collect_ref_list(row).keys()))
        flat_r = [item for sublist in refs for item in sublist]
        flat_r = list(set(flat_r))
        all_refs.append(flat_r)

    return all_refs


def filter_primary_org(file_dataframe, orgs_file):
    """
    Extracts the responsible organization from the broader text of the "entity" column.

    Args:
        file_dataframe: list

    Returns:
        list of extracted primary entities
    """
    orgs = pd.read_csv(orgs_file, delimiter='\n', header=None)[0]
    df = file_dataframe
    primary_orgs = []

    for row in df:
        for j in orgs:
            temp = []
            if "(" in j:
                check_org = j.split('(')[0].strip()
                if check_org in row:
                    temp.append(check_org)
            primary_orgs.append(temp)

    return primary_orgs


def _agg_stats(df, model_name, seq_len, batch_size):
    run_date = date.today().strftime("%d%m%Y")
    resp_per_doc, resp_no_entity, n_uniq_entities, n_docs = count_output(df)
    if resp_per_doc:
        df_resp_doc = pd.DataFrame(
            list(resp_per_doc.items()), columns=["doc", "count"]
        )
        df_resp_doc.to_csv("resp-in-doc-stats_{md}_{sl}_{bs}_{rd}.csv".format(
            md=model_name, 
            sl=seq_len, 
            bs=batch_size, 
            rd=run_date
            ), index=False
        )
    if resp_no_entity:
        df_resp_no_e = pd.DataFrame(
            list(resp_per_doc.items()), columns=["doc", "count"]
        )
        df_resp_no_e.to_csv("resp-no-entity-stats_{md}_{sl}_{bs}_{rd}.csv".format(
            md=model_name, 
            sl=seq_len, 
            bs=batch_size, 
            rd=run_date
            ), index=False
        )